def fibonacci(n: int) -> list[int]:
    """
    Generate a Fibonacci sequence up to n terms.

    The Fibonacci sequence starts with [1, 2] and each subsequent number
    is the sum of the previous two numbers.

    Args:
        n (int): Number of terms to generate in the sequence

    Returns:
        list[int]: List containing the first n numbers in the Fibonacci sequence
                   Returns empty list if n=0, [1] if n=1, or full sequence if n>=2

    Examples:
        >>> fibonacci(0)
        []
        >>> fibonacci(1)
        [1]
        >>> fibonacci(5)
        [1, 2, 3, 5, 8]
    """
    if n == 0:
        return []
    elif n == 1:
        return [1]
    else:
        fib = [1, 2]
        for i in range(2, n):
            fib.append(fib[i - 1] + fib[i - 2])
        return fib


def sumFibonacci(limit: int) -> int:
    """
    Sum of even number in fibonacci sequence.

    Project Euler #2:
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1,2,3,5,8,13,21,34,55,89,â€¦

    By considering the terms in the Fibonacci sequence whose values do not exceed
    four million, find the sum of the even-valued terms.

    Args:
    limit (int): An integer indicating maximum value.

    Return:
    An integer.
    """
    a, b = 1, 2
    result_sum = 0
    while b < limit:
        if b % 2 == 0:
            result_sum += b
        a, b = b, a + b

    return result_sum


def sumFibonacci2(limit: int) -> int:

    a, b = 2, 8
    result_sum = 10

    while True:
        next_fib = (4 * b) + a
        if next_fib >= limit:
            break
        result_sum += next_fib
        a, b = b, next_fib

    return result_sum
